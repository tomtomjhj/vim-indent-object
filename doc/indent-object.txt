*indent-object.txt*         Text objects based on indent levels.

           Copyright (c) 2010 Michael Smith

Indent Text Objects

INTRODUCTION                      |indent-object-introduction|
TEXT OBJECTS                      |indent-object-usage|
ABOUT                             |indent-object-about|


==============================================================================
INTRODUCTION                                      *indent-object-introduction*

This plugin provides text objects targeting indent levels, which is mainly
useful for working with whitespace-significant languages like Python. It also
allows targeting single delimiting lines above and below the indent level, which
is useful for languages with block end statements. It's a fork of
http://github.com/michaeljsmith/vim-indent-object. The original was forked
and rewritten to
  - hopefully make the code clearer,
  - add the blockwise objects that strip common indent from selection,
  - add mapping repeating last visual selection,
  - allow the closing delimiter to be selected independently,
  - handle mismatched delimiters better,
  - move from hardcoded mappings to `<Plug>` ones,
  - use on-demand loading via vim's autoload feature,
  - move from vmap and vnoremap to xmap and xnoremap,
  - and back all of this up with tests using Vader framework.

==============================================================================
                                                         *indent-object-usage*
                                                      *indent-object-mappings*
USAGE

The plugin defines no default concrete mappings, only abstract <Plug> ones.
You can define up to seventeen mappings. The kind of text object, or what is
included in it, is controlled by three boolean values, yielding eight
combinations. The flags are:
  - whether to include opening delimiter,
  - whether to include closing delimiter,
  - whether the selection is linewise or blockwise.

Each of those eight mappings can be invoked from either of the two following
modes, increasing the number to sixteen:
  - visual mode (allowing for iteration and interaction),
  - operator pending mode (so verbs like `d`, `c`, and so on work).

The seventeenth mapping makes sense only in visual mode. It expands the
selection range by repeating last invoked indent-object action.

All of the mappings accept counts.

For an initial invocation, the indent level is the indent level of the current
line in normal mode, or the outermost indent level in the selection in visual
mode.

The opening and closing delimiters for a selection with given indent level are
defined as one line above and below having indent level smaller than the
selection.

The blockwise selection differs from the linewise selection in that the common
indent (amount of indent equal to the indent level of the line found to be
outermost in the selection) is stripped. It is useful for yanking code, to be
run in REPL for example. If you have used the mapping visually selected some
range, you can toggle between linewise and blockwise selection types by
issuing corresponding mapping of another type. If you want to do so, make sure
to keep flags for delimiters the same. For example after selecting a linewise
range without delimiters, invoke a mapping for blockwise range without
delimiters, otherwise the selection will expand outwards.

You can define your concrete mappings by putting any number of lines from the
following snippet in your config, and tweaking keys to taste. The suffix
("none", "start", "end", or "both") determines which indent delimiters will be
included in the selection.
>
    omap ii <Plug>(indent-object_linewise-none)
    xmap ii <Plug>(indent-object_linewise-none)
    omap ai <Plug>(indent-object_linewise-start)
    xmap ai <Plug>(indent-object_linewise-start)
    omap iI <Plug>(indent-object_linewise-end)
    xmap iI <Plug>(indent-object_linewise-end)
    omap aI <Plug>(indent-object_linewise-both)
    xmap aI <Plug>(indent-object_linewise-both)

    omap ibi <Plug>(indent-object_blockwise-none)
    xmap ibi <Plug>(indent-object_blockwise-none)
    omap abi <Plug>(indent-object_blockwise-start)
    xmap abi <Plug>(indent-object_blockwise-start)
    omap ibI <Plug>(indent-object_blockwise-end)
    xmap ibI <Plug>(indent-object_blockwise-end)
    omap abI <Plug>(indent-object_blockwise-both)
    xmap abI <Plug>(indent-object_blockwise-both)

    xmap <C-o> <Plug>(indent-object_repeat)
<
The plugin seems to be working fine in scenarios with tabs mixed with spaces,
however this is not actively tested for. Feel free to report weird behaviors.

==============================================================================
ABOUT                                                    *indent-object-about*

NOTE: Apart from this paragraph, this section is preserved intact from the
original. The git repository of the rewrite can be found at:
https://github.com/urxvtcd/vim-indent-object

vim-indent-object was written by Michael Smith <msmith@msmith.id.au>. The
project repository is kept at:

http://github.com/michaeljsmith/vim-indent-object

Any feedback or criticism is welcome, and can be mailed to the author at the
above email address. Alternatively issues can be raised on the project
website.

Licence:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
